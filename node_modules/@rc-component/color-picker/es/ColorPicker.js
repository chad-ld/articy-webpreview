import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["open", "disabled", "trigger", "children", "onOpenChange", "placement", "classNames", "styles", "prefixCls", "builtinPlacements", "motion"];
import Trigger from '@rc-component/trigger';
import useMergedState from "rc-util/es/hooks/useMergedState";
import React from 'react';
import ColorPickerPanel from "./ColorPickerPanel";
import placements from "./components/placements";
import { ColorPickerPrefixCls } from "./util";
var ColorPicker = function ColorPicker(props) {
  var open = props.open,
    disabled = props.disabled,
    _props$trigger = props.trigger,
    trigger = _props$trigger === void 0 ? 'click' : _props$trigger,
    children = props.children,
    onOpenChange = props.onOpenChange,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'bottomLeft' : _props$placement,
    classNames = props.classNames,
    styles = props.styles,
    _props$prefixCls = props.prefixCls,
    prefixCls = _props$prefixCls === void 0 ? ColorPickerPrefixCls : _props$prefixCls,
    _props$builtinPlaceme = props.builtinPlacements,
    builtinPlacements = _props$builtinPlaceme === void 0 ? placements : _props$builtinPlaceme,
    motion = props.motion,
    resetProps = _objectWithoutProperties(props, _excluded);
  var _useMergedState = useMergedState(false, {
      value: open,
      postState: function postState(openData) {
        return !disabled && openData;
      },
      onChange: onOpenChange
    }),
    _useMergedState2 = _slicedToArray(_useMergedState, 2),
    openValue = _useMergedState2[0],
    setOpenValue = _useMergedState2[1];
  return /*#__PURE__*/React.createElement(Trigger, _extends({
    action: [trigger],
    popupVisible: openValue,
    popup: /*#__PURE__*/React.createElement(ColorPickerPanel, props),
    popupPlacement: placement,
    onPopupVisibleChange: setOpenValue,
    popupClassName: classNames === null || classNames === void 0 ? void 0 : classNames.popup,
    popupStyle: styles === null || styles === void 0 ? void 0 : styles.popup,
    builtinPlacements: builtinPlacements,
    popupMotion: motion,
    prefixCls: prefixCls
  }, resetProps), children);
};
export default ColorPicker;