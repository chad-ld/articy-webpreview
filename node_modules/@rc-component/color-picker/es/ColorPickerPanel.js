import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useMemo } from 'react';
import { ColorPickerPrefixCls, defaultColor, generateColor } from "./util";
import ColorBlock from "./components/ColorBlock";
import Picker from "./components/Picker";
import Slider from "./components/Slider";
import useColorState from "./hooks/useColorState";
var hueColor = ['rgb(255, 0, 0) 0%', 'rgb(255, 255, 0) 17%', 'rgb(0, 255, 0) 33%', 'rgb(0, 255, 255) 50%', 'rgb(0, 0, 255) 67%', 'rgb(255, 0, 255) 83%', 'rgb(255, 0, 0) 100%'];
var ColorPickerPanel = function ColorPickerPanel(_ref) {
  var value = _ref.value,
    defaultValue = _ref.defaultValue,
    _ref$prefixCls = _ref.prefixCls,
    prefixCls = _ref$prefixCls === void 0 ? ColorPickerPrefixCls : _ref$prefixCls,
    onChange = _ref.onChange,
    panelRender = _ref.panelRender;
  var _useColorState = useColorState(defaultColor, {
      value: value,
      defaultValue: defaultValue
    }),
    _useColorState2 = _slicedToArray(_useColorState, 2),
    colorValue = _useColorState2[0],
    setColorValue = _useColorState2[1];
  var alphaColor = useMemo(function () {
    var rgb = generateColor(colorValue.toRgbString());
    // alpha color need equal 1 for base color
    rgb.setAlpha(1);
    return rgb.toRgbString();
  }, [colorValue]);
  var handleChange = function handleChange(data) {
    if (!value) {
      setColorValue(data);
    }
    onChange === null || onChange === void 0 ? void 0 : onChange(data);
  };
  var panelElement = useMemo(function () {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Picker, {
      color: colorValue,
      onChange: handleChange,
      prefixCls: prefixCls
    }), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-slider-container")
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-slider-group")
    }, /*#__PURE__*/React.createElement(Slider, {
      gradientColors: hueColor,
      prefixCls: prefixCls,
      color: colorValue,
      value: "hsl(".concat(colorValue.toHsb().h, ",100%, 50%)"),
      onChange: handleChange
    }), /*#__PURE__*/React.createElement(Slider, {
      type: "alpha",
      gradientColors: ['rgba(255, 0, 4, 0) 0%', alphaColor],
      prefixCls: prefixCls,
      color: colorValue,
      value: colorValue.toRgbString(),
      onChange: handleChange
    })), /*#__PURE__*/React.createElement(ColorBlock, {
      color: colorValue.toRgbString(),
      prefixCls: prefixCls
    })));
  }, [prefixCls, alphaColor, colorValue, handleChange]);
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-panel")
  }, typeof panelRender === 'function' ? panelRender(panelElement) : panelElement);
};
export default ColorPickerPanel;