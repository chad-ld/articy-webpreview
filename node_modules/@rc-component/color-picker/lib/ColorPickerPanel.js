"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _util = require("./util");
var _ColorBlock = _interopRequireDefault(require("./components/ColorBlock"));
var _Picker = _interopRequireDefault(require("./components/Picker"));
var _Slider = _interopRequireDefault(require("./components/Slider"));
var _useColorState3 = _interopRequireDefault(require("./hooks/useColorState"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var hueColor = ['rgb(255, 0, 0) 0%', 'rgb(255, 255, 0) 17%', 'rgb(0, 255, 0) 33%', 'rgb(0, 255, 255) 50%', 'rgb(0, 0, 255) 67%', 'rgb(255, 0, 255) 83%', 'rgb(255, 0, 0) 100%'];
var ColorPickerPanel = function ColorPickerPanel(_ref) {
  var value = _ref.value,
    defaultValue = _ref.defaultValue,
    _ref$prefixCls = _ref.prefixCls,
    prefixCls = _ref$prefixCls === void 0 ? _util.ColorPickerPrefixCls : _ref$prefixCls,
    onChange = _ref.onChange,
    panelRender = _ref.panelRender;
  var _useColorState = (0, _useColorState3.default)(_util.defaultColor, {
      value: value,
      defaultValue: defaultValue
    }),
    _useColorState2 = (0, _slicedToArray2.default)(_useColorState, 2),
    colorValue = _useColorState2[0],
    setColorValue = _useColorState2[1];
  var alphaColor = (0, _react.useMemo)(function () {
    var rgb = (0, _util.generateColor)(colorValue.toRgbString());
    // alpha color need equal 1 for base color
    rgb.setAlpha(1);
    return rgb.toRgbString();
  }, [colorValue]);
  var handleChange = function handleChange(data) {
    if (!value) {
      setColorValue(data);
    }
    onChange === null || onChange === void 0 ? void 0 : onChange(data);
  };
  var panelElement = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Picker.default, {
      color: colorValue,
      onChange: handleChange,
      prefixCls: prefixCls
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-slider-container")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(prefixCls, "-slider-group")
    }, /*#__PURE__*/_react.default.createElement(_Slider.default, {
      gradientColors: hueColor,
      prefixCls: prefixCls,
      color: colorValue,
      value: "hsl(".concat(colorValue.toHsb().h, ",100%, 50%)"),
      onChange: handleChange
    }), /*#__PURE__*/_react.default.createElement(_Slider.default, {
      type: "alpha",
      gradientColors: ['rgba(255, 0, 4, 0) 0%', alphaColor],
      prefixCls: prefixCls,
      color: colorValue,
      value: colorValue.toRgbString(),
      onChange: handleChange
    })), /*#__PURE__*/_react.default.createElement(_ColorBlock.default, {
      color: colorValue.toRgbString(),
      prefixCls: prefixCls
    })));
  }, [prefixCls, alphaColor, colorValue, handleChange]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-panel")
  }, typeof panelRender === 'function' ? panelRender(panelElement) : panelElement);
};
var _default = ColorPickerPanel;
exports.default = _default;